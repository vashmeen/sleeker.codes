import type { NextPage } from 'next'
import Head from 'next/head'

const Home: NextPage = () => {
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="max-w:page bl-gap">
        <section className='layout:stack gap  rd:xl w:100%'>
          <h1 className='fs:xl fw:800'>An scalable css library based on utility classes close to css syntax</h1>
          <ul>
            <li>Compacter</li>
            <li>More CSS<span style={{ fontStyle: "italic" }}>ish</span></li>
            <li>With Automatic Dark Mode</li>
            <li>With Fluid sizes and Typography</li>
          </ul>
          <div className='d:flex wrap gap'>
            <CodeChip theCode="pd:xl" />
            <CodeChip theCode="flx" />
            <CodeChip theCode="gap:xs" />
            <CodeChip theCode="bg:green2" />
            <CodeChip theCode="clr:gray" />
            <CodeChip theCode="pd:xl" />
            <CodeChip theCode="pd:xl" />
          </div>
          <p>readable like css syntax</p>
          <div className='d:flex gap'>
            <a href="/sleek/docs" className='button'>Get Started</a>
            <a href="/sleek/docs" className="button">Use along Tailwind</a>
          </div>
        </section>
        <section className='layout:stack'>
          <h2>Why Sleeker?</h2>
          <p>Tailwind introduced Utility-class styling frameworks and it has been adopted by many. Not only it has great DX, it is by nature very well scalable and performant.</p>
          <p>But it comes with drawbacks. One is you need to learn a third-party api instead of CSS itself. The second is it leaved you with bloated html classes.</p>
          <p>Sleeker is trying mitigate these drawbacks</p>
          <p>by using classes that are like css syntax so you reuse/improve CSS knowledge while using sleeker</p>
          <p>need less classes (and media queries) thanks to automatic dark mode, fluid typography, fluid sizing and prebuilt layout patterns</p>
        </section >
        <section className='layout:stack'>
          <h2>Why Sleeker?</h2>
          <p>get Utility-based DX, scalability and performance</p>
          <p>but also</p>
          <ul className='layout:stack'>
            <WhySleekerCard title="Write less utility classes">
              <span className=''>automatic dark-mode</span>
              <span className=''>fluid typography and design. no media query needed. fluid types are accessible.</span>
              <span className=''>use one layout-primitives utility classes instead of 7 flex utility class</span>
            </WhySleekerCard>
            <WhySleekerCard title="Write less code" >
              <span className=''>compact classes for frequently used stuff</span>
            </WhySleekerCard>
            <WhySleekerCard title="Write readable code">
              <span className=''>Intuitive CSS like format.</span>
              <span className=''>readable and predictable. bd-size-l border size is large or border is size large ðŸ¤”ðŸ˜…</span>
              <span> bd-size:l  border size is large. ðŸ¤“</span>
              <span>in Tailwind .space-x-2.5 means margin-left: 0.625rem ðŸ¤”</span>
              <span className=''>Self-descriptive classes for less common stuff</span>
            </WhySleekerCard>
            <WhySleekerCard className="Be the Designer. Use Sleek Design System GUI">
              <span className=''>Create your design system with GUI</span>
              <span className=''>Pre style UI atoms (elements and low-level components) </span>
              <span className=''>Add lots of variations and get the variation classes</span>
              <span className=''>Enforce the design system in your team</span>
            </WhySleekerCard>
            <WhySleekerCard className="Scale without missing weekends">
              <span className=''>Add lots of color schemes or sizing themes with GUI.</span>
              <span className=''>Dra</span>
            </WhySleekerCard>
            <WhySleekerCard title="Don't lose control">
              <span className=''>Configure anything, in CSS. Do not fight with the setup env</span>
              <span className=''>override design tokens in markup</span>
              <span className=''>Use theme globally or just in an specific scope</span>
              <span className=''>sudo classes media queries not needed by default but included</span>
            </WhySleekerCard>
            <WhySleekerCard title="Learn Faster">
              <span >Don not memorize 1639 class. Just learn 5 pattern + 10 shorthands</span>
            </WhySleekerCard>
            <WhySleekerCard title="Use in old project along Tailwind">
              <span className=''>Not a single class collides with 1434334 classes in tailwind. not even with dynamic ones</span>
            </WhySleekerCard>
            <WhySleekerCard title="No JS knowledge required">
            </WhySleekerCard>
          </ul>
        </section>
        <section >
          <h2>Sleeker vs Tailwind</h2>
          <div>
            <p>code in SleeK </p>
            <p>code in Tailwind </p>
          </div>
          <ul>
            <li>
              no need for at-layer. it is all well setup.
            </li>
            <li>
              No at-apply bad practiceS.
            </li>
            <li>Accessible fluid typography. User can zoom up to 400</li>
            <li>Mobile first design </li>
            <li>Utilize modern css features like :has where supported</li>
            <li>Semantic size scales</li>
          </ul>

        </section>
      </div >
    </div >
  )
}

export default Home;



const WhySleekerCard = ({ title = "", children }: any) => {


  return (
    <li className='pd:s bg:mauve4 rd clr:mauve12'>
      <h3 className='fw:700'>
        {title}
      </h3>
      {children}
    </li>
  )
}

const CodeChip = ({ theCode = "" }) => {
  return <code className='pd:9xs fs pd-inl:l rd:pill bg:sky4 clr:sky11'>{theCode}</code>
}